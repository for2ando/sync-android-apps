#!/bin/bash
pname=$(basename "$0")
dname=$(dirname "$0")
case "$dname" in /*);; *) dname="$(pwd)/$dname";; esac
source "$dname/saa-environ.sh"
xpager=$(which pageless 2>/dev/null || ${PAGER:-less})
usage="$pname [{-t|--target} {apk|ab|apk,ab}] [-l|--list|-q|--quiet|-v|--verbose|-n|--dryrun|--log|--nolog]
$pname {-h|--help}
Features:
  Get (or list) programs (apk files) and/or data (adb backups or raw /data
  directory images) files from a remote Android device using adb command.
  The entity (the programs and the data) are stored to the 'apps' directory,
  which is a child of current directory (Such directory is called
  SAADirectory).
  If the entities are already in the '$appsdir' directory, they are not
  getting or listing (The -o|--overwrite disables this behavior.). And if
  the name of entities are already listed in the list: '$blacklist' file,
  they are also not getting or listing.

Options:
  -t|--target {apk|ab|apk,ab}
    Target entities to get from a remote Android device. Default is apk,ab.
  -o|--overwrite
    If the entities are already on the '$appsdir' directory, do putting or
    listing.
  -l|--list
    Instead of getting entities, List entities on a remote Android device.
  -q|--quiet
    No messages are displayed, except error message.
  -v|--verbose
    Additional messages are displayed. It has a precedence over -q|--quiet.
  -n|--dryrun
    Only messages displayed, No SAADirectory is made and no entities is got.
  --log
    Logging almost all messages to logfiles. It is a default.
  --nolog
    No log files created. It is a default when -n|--dryrun or -l|--list.
  -h|--help
    This help message is displayed."

source "$dname/run.sh"
source "$dname/adbwrappers.sh"
source "$dname/in_args.sh"
source "$dname/trapwrapper.sh"
printcommandline() {
  echo -n $pname
  test -n "$SAADIR" && echo -n " --saadir '$SAADIR'"
  echo -n " --target '$targets'"
  $listp && echo -n " --list"
  $quietp && echo -n " --quiet"
  $verbosep && echo -n " --verbose"
  $dryrunp && echo -n " --dryrun"
  $nologp && echo -n " --nolog" || echo -n " --log"
}

targets='apk,ab'
overwritep=false
listp=false
quietp=false
verbosep=false
dryrunp=false
nologp=false
helpp=false
opterrp=false
declare -a opts
while true; do
  case "$1" in
  -|--) break;;
  --*) opts=("$1"); shift;;
  -*) for n in $(seq 1 $((${#1}-1))); do opts[$n]="-${1:$n:1}"; done; shift;;
  *) break;;
  esac
  for opt in "${opts[@]}"; do
    case "$opt" in
    -t|--target) targets="$1"; shift;;
    -o|--overwrite) overwritep=true;;
    -l|--list) listp=true; nologp=true;;
    -q|--quiet) quietp=true;;
    -v|--verbose) verbosep=true;;
    -n|--dryrun) dryrunp=true; verbosep=true; nologp=true;;
    --log) nologp=false;;
    --nolog) nologp=true;;
    -h|--help) helpp=true;;
    -*) echo "$opt: unknown option.">&2; opterrp=true;;
    esac
  done
done
$opterrp && exit 1
$helpp || test $# -ne 0 && { echo "$usage" | $xpager; exit;}
targets=$(IFS=$' \t\n,'; echo $targets)

#signals='EXIT SIGHUP SIGINT SIGQUIT SIGTERM ERR'
signals='SIGHUP SIGINT SIGQUIT SIGTERM'
workdir=$(mktemp --tmpdir --directory $pname.d.XXXXXXXXXX)
trap-open rmtmp $signals
trap-addcmd rmtmp "rm -rf '$workdir'"
trap-calltrap rmtmp

adev="$(_adb devices -l)"
dev=$(echo "$adev" | adb-parsedev -b -o -r -s -u model) || exit 11
stamp=$(date +%Y%m%d-%H%M%S)
if $listp; then
  logdir="log.d-$stamp-$dev-getlist"
else
  logdir="log.d-$stamp-$dev-get"
fi
trap-removecmd rmtmp "rm -rf '$workdir'"
trap-addcmd rmtmp "$nologp || copyworktolog; rm -rf '$workdir'"
trap-calltrap rmtmp
if $nologp; then
  log=/dev/null
else
  log="$workdir/$logfilename"
fi
pkgondev="$workdir/$pkgondev_stem"
pkgtoget="$workdir/$pkgtoget_stem"
filetoget="$workdir/$filetoget_stem"
$overwritep && { gotten="$workdir/$gotten_stem"; >"$gotten";}


(
  $quietp || echo "commandline: $(printcommandline)">&2
  $quietp || echo "device: $dev">&2
  $quietp || echo "timestamp: $stamp">&2
  
  test "$(basename $(pwd))" = apps && cd ..
  test -r "$pkglist" -o -d apps || {
    echo "No $pkglist file nor apps directory here.
      Please chdir to one of saadir which has '$pkglist' file and 'apps' dir.">&2
    exit 3
  }
  ! $listp && ! $dryrunp && cp -p "$pkglist" "$workdir/$pkglist-pre"



  $quietp || { echo; echo "**** compute supplements based on packages."; }>&2
  tPkgtoget_candidate="$workdir"/tPkgtoget_candidate
  trap-addcmd rmtmp "rm -f '$tPkgtoget_candidate'"
  trap-calltrap rmtmp
  $quietp || echo "make $pkgondev_stem: pkgs-list on the device.">&2
  dryrunp=false run get-android-apps list -3 >"$pkgondev" ||
    { echo "'get-android-apps list': failed.">&2; rm -f "$pkgondev"; exit 5;}
  $quietp || echo "make $pkgtoget_stem: list of pkgs to get (exist on the device but not saadir).">&2
  if $overwritep; then
    cat "$pkgondev" >"$tPkgtoget_candidate"
  else
    set-complement "$pkgondev" <(sed '/^[ \t]*#/d' "$pkglist") >"$tPkgtoget_candidate"
  fi ||
    { echo "make $pkgtoget: failed.">&2;  exit 6;}
  if test -f "$blacklist" && test -r "$blacklist"; then
    $quietp || echo "apply blacklist: $blacklist to $pkgtoget_stem.">&2
    set-complement "$tPkgtoget_candidate" <(sed '/^[ \t]*#/d' "$blacklist") >"$pkgtoget" ||
      { echo "apply $blacklist: failed.">&2; rm -f "$pkgtoget"; exit 7;}
    rm -f "$tPkgtoget_candidate"
  else
    mv "$tPkgtoget_candidate" "$pkgtoget"
  fi
  trap-removecmd rmtmp "rm -f '$tPkgtoget_candidate'"
  trap-calltrap rmtmp

  if $listp; then
    echo -------- Packages to get:
    cat "$pkgtoget"
    echo -------- end of Packages to get:
    rm "$pkgtoget"
  else
    if test $(cat "$pkgtoget" | wc -l) -eq 0; then
      $quietp || echo "No packages to get.">&2
    else
      cd apps
      for obj in $targets; do
        $quietp || echo "get $obj files of $pkgtoget_stem pkgs.">&2
        $dryrunp && dryrun_opt=' --dryrun' || dryrun_opt=
        dryrunp=false run get-android-apps${dryrun_opt}${gotten:+ -g "$gotten"} $obj $(cat "$pkgtoget") ||
          { test $? = 255 && break;}
      done
      cd ..
    fi
    $dryrunp && rm "$pkgtoget"
  fi



  in_args apk $targets && {
    $quietp || { echo; echo "**** compute supplements based on files."; }>&2
    tPkgtochk_candidate="$workdir"/tPkgtochk_candidate
    tPkgtochk_last="$workdir"/tPkgtochk_last
    trap-addcmd rmtmp "rm -f '$tPkgtochk_last'"
    trap-addcmd rmtmp "rm -f '$tPkgtochk_candidate'"
    trap-calltrap rmtmp
    $quietp || echo "make list of exist pkgs both on the device and the saadir.">&2
    set-product "$pkgondev" <(sed '/^[ \t]*#/d' "$pkglist") >"$tPkgtochk_candidate" ||
      { echo "set-product: failed.">&2;  exit 16;}
    if test -f "$blacklist" && test -r "$blacklist"; then
      $quietp || echo "apply blacklist: $blacklist to the list.">&2
      set-complement "$tPkgtochk_candidate" <(sed '/^[ \t]*#/d' "$blacklist") >"$tPkgtochk_last" ||
        { echo "set-complement: failed.">&2; rm -f "$tPkgtochk_last"; exit 17;}
      rm -f "$tPkgtochk_candidate"
    else
      mv "$tPkgtochk_candidate" "$tPkgtochk_last"
    fi
    trap-removecmd rmtmp "rm -f '$tPkgtochk_candidate'"
    trap-calltrap rmtmp
    
    tFilelist="$workdir"/tFilelist
    tFileorig="$workdir"/tFileorig
    trap-addcmd rmtmp "rm -f '$tFilelist'"
    trap-addcmd rmtmp "rm -f '$tFileorig'"
    trap-calltrap rmtmp
    $quietp || echo "make $tFilelist: file-list on the saadir.">&2
    (cd apps; ls *.apk 2>/dev/null) >"$tFilelist"
    $quietp || echo "make $tFileorig: file-list on the device.">&2
    for pkg in $(cat "$tPkgtochk_last"); do
      dryrunp=false run get-android-apps listapk "$pkg"
    done >"$tFileorig"
    $quietp || echo "make $filetoget_stem: list of files to get (exist on the device but not saadir).">&2
    if $overwritep; then
      set-complement "$tFileorig" "$gotten" >"$filetoget"
    else
      set-complement "$tFileorig" "$tFilelist" >"$filetoget"
    fi ||
      { echo "set-complement: failed.">&2;  exit 18;}
    
    if $listp; then
      echo -------- Files to get:
      cat "$filetoget"
      echo -------- end of Files to get:
      rm "$filetoget"
    else
      if test $(cat "$filetoget" | wc -l) -eq 0; then
        $quietp || echo "No files to get.">&2
      else
        cd apps
        mapfile -t files <"$filetoget"
        $dryrunp && dryrun_opt=' --dryrun' || dryrun_opt=
        dryrunp=false run get-android-apps${dryrun_opt}${gotten:+ -g "$gotten"} singleapk "${files[@]}"
        cd ..
      fi
      $dryrunp && rm "$filetoget"
    fi
    rm -f "$tPkgtochk_last" "$tFilelist" "$tFileorig"
    
    trap-removecmd rmtmp "rm -f '$tFileorig'"
    trap-removecmd rmtmp "rm -f '$tFilelist'"
    trap-removecmd rmtmp "rm -f '$tPkgtochk_last'"
    trap-calltrap rmtmp
  }

  if $listp || $dryrunp; then
    rm "$pkgondev"
  else
    cp -p "$pkglist" "$workdir/$pkglist-post"
    test -f "$blacklist" && cp -p "$blacklist" "$workdir/$blacklist"
    "$dname"/saa-make-list || { echo "saa-make-list: failed.">&2; exit 32;}
  fi
) 2>&1 | tee "$log"



$nologp || copyworktolog
rm -rf "$workdir"
trap-close rmtmp
